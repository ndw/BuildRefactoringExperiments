<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:xs="http://www.w3.org/2001/XMLSchema" exclude-result-prefixes="xs"
                xmlns:xd="http://www.oxygenxml.com/ns/doc/xsl" version="3.0">

  <xsl:output method="text"/>

  <xsl:template match="features">
    <xsl:call-template name="validate"/>
    <xsl:apply-templates select="." mode="FeatureKeys.java"/>
    <xsl:apply-templates select="." mode="Feature.java"/>
    <xsl:apply-templates select="." mode="FeatureCode.java"/>
  </xsl:template>
    
  <xsl:template match="features" mode="FeatureCode.java">
    <xsl:result-document href="FeatureCode.java" method="text">
      <xsl:text><![CDATA[////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018-2024 Saxonica Limited
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0.
// If a copy of the MPL was not distributed with this file, You can
// obtain one at http://mozilla.org/MPL/2.0/.
// This Source Code Form is "Incompatible With Secondary Licenses", 
// as defined by the Mozilla Public License, v. 2.0.
////////////////////////////////////////////////////////////////////////

package net.sf.saxon.lib;

// AUTO-GENERATED FROM FeatureKeys.xml - DO NOT EDIT THIS FILE
// If you edit this file, your edits WILL BE TERMINATED with
// extreme prejudice by the next build.

/**
 * FeatureCode defines a set of integer constants, representing unique identifiers for the
 * features that can be configured. This module is generated from the master XML
 * file listing all the features.
 * 
 * <p>The integer codes are intended to remain stable across Saxon releases so that compiled
 * code using these integer codes will continue to work without recompilation.</p>
 */

public abstract class FeatureCode {

]]></xsl:text>
      <xsl:apply-templates select="//feature" mode="#current"/>
      <xsl:text expand-text="yes">&#xa;&#xa;    public final static int MAX = {count(//feature) + 3};&#xa;</xsl:text>
      <xsl:text>
}
      </xsl:text>
    </xsl:result-document>
  </xsl:template>
    
  <xsl:template match="features" mode="FeatureKeys.java">
    <xsl:result-document href="FeatureKeys.java" method="text">
      <xsl:text><![CDATA[////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018-2024 Saxonica Limited
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0.
// If a copy of the MPL was not distributed with this file, You can
// obtain one at http://mozilla.org/MPL/2.0/.
// This Source Code Form is "Incompatible With Secondary Licenses", 
// as defined by the Mozilla Public License, v. 2.0.
////////////////////////////////////////////////////////////////////////

package net.sf.saxon.lib;

// AUTO-GENERATED FROM FeatureKeys.xml - DO NOT EDIT THIS FILE
// If you edit this file, your edits WILL BE TERMINATED with
// extreme prejudice by the next build.

/**
 * FeatureKeys defines a set of constants, representing the names of Saxon configuration
 * options which can be supplied to the Saxon implementations of the JAXP
 * interfaces TransformerFactory, SchemaFactory, Validator, and ValidationHandler,
 * and to other interfaces such as the s9api {@link net.sf.saxon.s9api.Processor}
 */

public abstract class FeatureKeys {

]]></xsl:text>
      <xsl:apply-templates select="//feature" mode="#current"/>
      <xsl:text>
}
      </xsl:text>
    </xsl:result-document>
  </xsl:template>
    
  <xsl:template match="features" mode="Feature.java">
    <xsl:result-document href="FeatureData.java" method="text">
      <xsl:text><![CDATA[
////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018-2024 Saxonica Limited
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0.
// If a copy of the MPL was not distributed with this file, You can
// obtain one at http://mozilla.org/MPL/2.0/.
// This Source Code Form is "Incompatible With Secondary Licenses", 
// as defined by the Mozilla Public License, v. 2.0.
////////////////////////////////////////////////////////////////////////

package net.sf.saxon.lib;

// AUTO-GENERATED FROM FeatureKeys.xml - DO NOT EDIT THIS FILE
// If you edit this file, your edits WILL BE TERMINATED with
// extreme prejudice by the next build.

public class FeatureData {
    public String uri;
    public int code;
    public String editions;
    public Class<?> type;
    public Object defaultValue;
    
    public FeatureData(String uri, int code, String editions, Class<?> type, Object defaultValue) {
        this.uri = uri;
        this.code = code;
        this.editions = editions;
        this.type = type;
        this.defaultValue = defaultValue;
    }

    public static java.util.List<FeatureData> featureList = new java.util.ArrayList<>();
    
    public static void init() {]]>
            </xsl:text>
            <xsl:for-each select="//feature">
                <xsl:variable name="type" as="xs:string">
                    <xsl:apply-templates select="type"/>
                </xsl:variable>
                <xsl:variable name="default" select="if ($type='Boolean') then 'Boolean.FALSE' else 'null'"/>
                <xsl:text expand-text="yes">
       featureList.add(new FeatureData("{uri}", {featureCode}, "{editions}", {$type}.class, {$default}));     
                </xsl:text>
            </xsl:for-each>
    <xsl:text>
     }
 }    
    </xsl:text>   
    </xsl:result-document>
        
    <xsl:result-document href="Feature.java" method="text">
      <xsl:text><![CDATA[////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018-2024 Saxonica Limited
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0.
// If a copy of the MPL was not distributed with this file, You can
// obtain one at http://mozilla.org/MPL/2.0/.
// This Source Code Form is "Incompatible With Secondary Licenses", 
// as defined by the Mozilla Public License, v. 2.0.
////////////////////////////////////////////////////////////////////////

package net.sf.saxon.lib;

// AUTO-GENERATED FROM FeatureKeys.xml - DO NOT EDIT THIS FILE
// If you edit this file, your edits WILL BE TERMINATED with
// extreme prejudice by the next build.

/**
 * Feature defines a set of constants, representing the details of Saxon configuration
 * options which can be supplied to the Saxon method Configuration.setProperty(),
 * and to other interfaces
 */

public class Feature<T> {
    public final int code;
    public final String name;

    private Feature(int code, String name) {
        this.code = code;
        this.name = name;
    }
]]></xsl:text>
      <xsl:apply-templates select="//feature" mode="#current"/>
      <xsl:text>            
}
      </xsl:text> 
    </xsl:result-document>
  </xsl:template>
    
  <xsl:template match="feature" mode="FeatureKeys.java">
    <!--<xsl:message>Processing <xsl:value-of select="name"/></xsl:message>-->
    <xsl:apply-templates select="desc, name, uri" mode="#current"/>
  </xsl:template>
    
  <xsl:template match="feature" mode="FeatureCode.java" expand-text="yes">
    <xsl:text>    /** @see Feature#{name}  */&#xa;</xsl:text>
    <xsl:text>    public final static int {name} = {featureCode};&#xa;</xsl:text>
  </xsl:template>
   
  <xsl:template match="name" mode="FeatureKeys.java">
    <xsl:text>&#xa;&#xa;    public final static String </xsl:text>
    <xsl:value-of select="."/>
    <xsl:text> = </xsl:text>
  </xsl:template>
    
  <xsl:template match="feature/*" priority="-0.1" mode="#all"/>
    
  <xsl:template match="uri" mode="FeatureKeys.java">
    <xsl:text>&#xa;        "</xsl:text>
    <xsl:value-of select="."/>
    <xsl:text>";&#xa;</xsl:text>
    <xsl:text>&#xa;// AUTO-GENERATED FROM FeatureKeys.xml - DO NOT EDIT THIS FILE&#xa;&#xa;</xsl:text>
  </xsl:template>
    
  <xsl:template match="desc" mode="#all">
    <xsl:text>&#xa;    /**</xsl:text>
    <xsl:apply-templates mode="#current"/>
    <xsl:text>&#xa;    **/</xsl:text>
  </xsl:template>
    
  <xsl:template match="desc//*" mode="#all">
    <xsl:text>&lt;</xsl:text>
    <xsl:value-of select="name()"/>
    <xsl:text>&gt;</xsl:text>
    <xsl:apply-templates mode="#current"/>
    <xsl:text>&lt;/</xsl:text>
    <xsl:value-of select="name()"/>
    <xsl:text>&gt;</xsl:text>
  </xsl:template>
  
  <xsl:template match="desc//link" priority="2" mode="Feature.java">
    <xsl:text>{@link </xsl:text>
    <xsl:apply-templates/>
    <xsl:text>}</xsl:text>
  </xsl:template>
  
  <xsl:template match="desc//link" priority="2" mode="FeatureKeys.java">
    <xsl:text>{@link </xsl:text>
    <xsl:value-of select="replace(., 'net.sf.saxon.lib.Feature#', 'net.sf.saxon.lib.FeatureKeys#')"/>
    <xsl:text>}</xsl:text>
  </xsl:template>
  
  <xsl:template match="desc//a" priority="2" mode="#all">
    <xsl:text>{@code </xsl:text>
    <xsl:apply-templates mode="#current"/>
    <xsl:text>}</xsl:text>
  </xsl:template>
  
  <xsl:template match="desc//text()" mode="#all">
    <xsl:value-of select="replace(replace(replace(., '&#xa;', '&#xa;    *'), '&gt;', '&amp;gt;'), '&lt;', '&amp;lt;')"/>
  </xsl:template>
  
  <xsl:template match="feature" mode="Feature.java" expand-text="yes">
    <xsl:variable name="type" as="xs:string">
      <xsl:apply-templates select="type"/>
    </xsl:variable>
    <xsl:variable name="angledType" select="'&lt;'||$type||'&gt;'"/>
    <xsl:variable name="javaType" select="
                                          if ($type = 'boolean') then 'Boolean.TYPE'
                                          else if ($type = 'integer') then 'Integer.TYPE'
                                          else ($type || '.class')"/>
    <xsl:apply-templates select="desc" mode="#current"/>
    <xsl:text>&#xa;&#xa;    public final static Feature{$angledType} {name} = new Feature{$angledType}({featureCode}, "{uri}");</xsl:text>
    <xsl:text>&#xa;// AUTO-GENERATED FROM FeatureKeys.xml - DO NOT EDIT THIS FILE&#xa;&#xa;</xsl:text>
  </xsl:template>
  
  <xsl:template match="type[.='boolean']">
    <xsl:text><![CDATA[Boolean]]></xsl:text>
  </xsl:template>
  
  <xsl:template match="type[starts-with(., 'integer')]">
    <xsl:text><![CDATA[Integer]]></xsl:text>
  </xsl:template>
  
  <xsl:template match="type[starts-with(., 'string') or starts-with(., 'Absolute URI')]">
    <xsl:text><![CDATA[String]]></xsl:text>
  </xsl:template>
  
  <xsl:template match="type[starts-with(., 'Instance of')]" expand-text="yes">
    <xsl:text>{(link|code)[1]}</xsl:text>
  </xsl:template>
  
  <xsl:template match="type[starts-with(., 'Name of a class')]" expand-text="yes">
    <xsl:text><![CDATA[String]]></xsl:text>
  </xsl:template>
  
  <xsl:template match="type">
    <xsl:text><![CDATA[Object]]></xsl:text>
  </xsl:template>
  
  <xsl:template name="validate" expand-text="yes">
    <xsl:if test="//feature[not(featureCode)]">
      <xsl:message terminate="yes">Every feature must have a numeric featureCode</xsl:message>
    </xsl:if>
    <xsl:if test="count(//featureCode) ne count(distinct-values(//featureCode))">
      <xsl:message terminate="yes">Every featureCode must be unique</xsl:message>
    </xsl:if>
  </xsl:template>
</xsl:stylesheet>
